<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenCV on </title>
    <link>/tags/opencv/</link>
    <description>Recent content in OpenCV on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 08 Jun 2018 23:01:32 +0000</lastBuildDate>
    
	<atom:link href="/tags/opencv/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenCV两个Mat相减的隐藏秘密</title>
      <link>/post/2018/06/08/opencv%E4%B8%A4%E4%B8%AAmat%E7%9B%B8%E5%87%8F%E7%9A%84%E9%9A%90%E8%97%8F%E7%A7%98%E5%AF%86/</link>
      <pubDate>Fri, 08 Jun 2018 23:01:32 +0000</pubDate>
      
      <guid>/post/2018/06/08/opencv%E4%B8%A4%E4%B8%AAmat%E7%9B%B8%E5%87%8F%E7%9A%84%E9%9A%90%E8%97%8F%E7%A7%98%E5%AF%86/</guid>
      <description>起因 今天在看同事写的代码时，发现一个“错误”： 他的原意是实现以下功能：
cv::Mat absDiff; cv::absdiff(mat1, mat2, absDiff);  其中mat1和mat2均为CV_8UC1类型。
但是可能是一时没想起这个函数，于是他写成了这个样子：
cv::Mat absDiff = cv::abs(mat1 - mat2);  问题 于是我认真地告诉他，这样做是错的。假设mat1为[0]，mat2为[255]，那么mat1 - mat2将会得到[0]，因为cv::saturate_cast&amp;lt;uchar&amp;gt;(0 - 255) == 0。则cv::abs([0])自然就是[0]，而他的期望是得到[255]。
并且我写出如下代码证明他是错的：
cv::Mat diff = mat1 - mat;  结果diff确实是[0]。那么cv::Mat absDiff = cv::abs(diff);肯定就是[0]了。
但是他坚持让我用cv::Mat absDiff = cv::abs(mat1 - mat2);测试。结果。。。。absDiff竟然真的是[255]！我当时就震惊了，同时隐隐有一种感觉：这其中一定隐藏着一个天大的秘密。
秘密 于是我进入调试模式，认真观察每一步，终于明白了玄机所在。
为什么我得到了[0] 先来分析我的测试代码：
cv::Mat diff = mat1 - mat;  在我以前的观念里，mat1 - mat是两个cv::Mat互相作用，实际上调用的是cv::subtract()。但是事实上，mat1 - mat2调用的是以下函数：
CV_EXPORTS MatExpr operator - (const Mat&amp;amp; a, const Mat&amp;amp; b); MatExpr operator - (const Mat&amp;amp; a, const Mat&amp;amp; b) { MatExpr e; MatOp_AddEx::makeExpr(e, a, b, 1, -1); return e; }  可以看到，mat1 - mat2实际上是生成了一个MatExpr对象。在生成过程中，并没有进行实际的相减操作，而只是保存了a和b，并记录了它们之间期望进行的操作：相减。实际的相减操作是在类型转换时进行的：</description>
    </item>
    
  </channel>
</rss>