<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>细节 on </title>
    <link>/tags/%E7%BB%86%E8%8A%82/</link>
    <description>Recent content in 细节 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 29 Apr 2018 21:50:14 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E7%BB%86%E8%8A%82/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>提取图像细节的两种方法</title>
      <link>/post/2018/04/29/%E6%8F%90%E5%8F%96%E5%9B%BE%E5%83%8F%E7%BB%86%E8%8A%82%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 29 Apr 2018 21:50:14 +0000</pubDate>
      
      <guid>/post/2018/04/29/%E6%8F%90%E5%8F%96%E5%9B%BE%E5%83%8F%E7%BB%86%E8%8A%82%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>一幅图像可以分解为两层：底层(base layer)和细节层(detail layer)。底层包含图像的低频信息，反映了图像在大尺度上的强度变化；细节层包含图像的高频信息，反映了图像在小尺度上的细节。分解图像有两种方式，以下分别进行解释。
1. 加性分解 要获取图像的底层，即图像的低频信息，使用低通滤波(如均值滤波(mean filter)、高斯滤波(gaussian filter)、导向滤波(guided filter)等)对图像进行滤波即可： $$B = f(I) $$ 其中\(I\)表示要分解的图像，\(f(\cdot)\)表示低通滤波操作，\(B\)为提取的底层。
提取底层后，使用源图像减去底层，即为细节层： $$D = I - B$$ 其中\(D\)表示提取的细节层。
因为底层加上细节层即为源图像，所以我称此种分解方法为加性分解，对应于加性噪声。关于此种方法的应用，可以参见[1]。
2. 乘性分解 获取底层的方法与加性分解相同。然后使用源图像除以底层，即可得到细节层： $$D = \frac{I + \epsilon}{B + \epsilon}$$ 其中\(\epsilon\)为一个很小的常数，以防止除零错误。
因为底层乘以细节层即为源图像，所以我称此种分解方法为乘性分解，对应于乘性噪声。关于此种方法的应用，可以参见[2]。在其他文章中，此处得到的细节层也称为商图像(quotient image)[3]或比例图像(ratio image)[4]。
3. 代码及效果 // 图像细节提取。 // 编程环境：Visual Studio Community 2015 + OpenCV 3.3.0 #include &amp;quot;opencv2/core/core.hpp&amp;quot; #include &amp;quot;opencv2/imgcodecs/imgcodecs.hpp&amp;quot; #include &amp;quot;opencv2/imgproc/imgproc.hpp&amp;quot; #include &amp;quot;opencv2/highgui/highgui.hpp&amp;quot; int main() { cv::Mat I = cv::imread(&amp;quot;im.png&amp;quot;); if (I.empty()) { return -1; } I.</description>
    </item>
    
  </channel>
</rss>