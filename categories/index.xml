
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Categories on </title>
   <link>https://rzwm.github.io/categories/</link>
   <description>Recent content in Categories on </description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2019 - rzwm</copyright>
   
       <atom:link href="https://rzwm.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>关于我</title>
       <link>https://rzwm.github.io/about/</link>
       <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
       
       <guid>https://rzwm.github.io/about/</guid>
       <description>&lt;p&gt;昵称 ：rzwm&lt;/p&gt;

&lt;p&gt;Github： &lt;a href=&#34;https://github.com/rzwm&#34;&gt;https://github.com/rzwm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主页： &lt;a href=&#34;https://rzwm.github.io/&#34;&gt;https://rzwm.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;邮箱：rzwm1992@139.com&lt;/p&gt;

&lt;p&gt;领域：性能优化，图像处理&lt;/p&gt;

&lt;p&gt;有任何疑问，欢迎发邮件交流探讨~&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>C&#43;&#43;11高精度计时器</title>
       <link>https://rzwm.github.io/posts/cpp-timer/</link>
       <pubDate>Sun, 27 Oct 2019 20:35:52 +0800</pubDate>
       
       <guid>https://rzwm.github.io/posts/cpp-timer/</guid>
       <description>&lt;p&gt;做图像处理算法时，免不了要测量函数的运行时间。以前我都是使用OpenCV的计时函数&lt;code&gt;cv::getTickCount()&lt;/code&gt;和&lt;code&gt;cv::getTickFrequency()&lt;/code&gt;，但是这样一来，在不使用OpenCV的项目中就没法用了。&lt;/p&gt;

&lt;p&gt;幸好C++11增加了&lt;code&gt;std::chrono&lt;/code&gt;库，可以很方便地实现跨平台的时间测量。于是我封装了一个简单的计时器类，这样只要将其简单地保存为头文件并在.cpp文件中包含，就可以直接使用了。&lt;/p&gt;

&lt;p&gt;此类当前的计时单位为毫秒，但可以去除&lt;code&gt;/ 1e3&lt;/code&gt;从而精确到微秒级。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Timer.h
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma once
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Timer&lt;/span&gt; {
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	Timer()
		&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; t1(res&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;zero())
		, t2(res&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;zero()) {
		tic();
	}

	&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Timer() {}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tic&lt;/span&gt;() {
		t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clock&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;now();
	}

	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;toc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; str) {
		t2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; clock&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;now();
		std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; str &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; time: &amp;#34;&lt;/span&gt;
			&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;duration_cast&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;res&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(t2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; t1).count() &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1e3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ms.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
	}

&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;high_resolution_clock clock;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;microseconds res;

	clock&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;time_point t1;
	clock&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;time_point t2;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;测试代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;Timer.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	Timer timer;

	std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
	timer.toc(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output 1&amp;#34;&lt;/span&gt;);

	timer.tic();
	std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;endl;
	timer.toc(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;output 2&amp;#34;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;#ifdef _MSC_VER
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	system(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
&lt;span style=&#34;color:#75715e&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// _MSC_VER
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
output &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; time: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.26&lt;/span&gt;ms.
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
output &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; time: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.039&lt;/span&gt;ms.
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;请按任意键继续&lt;/span&gt;. . .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
     </item>
   
 </channel>
</rss>
