<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Classic</title>
    <link>/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Classic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 27 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;11高精度计时器</title>
      <link>/post/2019/10/27/c-11%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E6%97%B6%E5%99%A8/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/10/27/c-11%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E6%97%B6%E5%99%A8/</guid>
      <description>做图像处理算法时，免不了要测量函数的运行时间。以前我都是使用OpenCV的计时函数cv::getTickCount()和cv::getTickFrequency()，但是这样一来，在不使用OpenCV的项目中就没法用了。幸好C++11增加了std::chrono库，可以很方便地实现跨平台的时间测量。于是我封装了一个简单的计时器类，这样只要将其简单地添加到项目中，就可以直接使用了。此类当前的计时单位为毫秒，但可以去除/ 1e3从而精确到微秒级。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;chrono&amp;gt; class Timer { public: Timer() : t1(res::zero()) , t2(res::zero()) { tic(); } ~Timer() {} void tic() { t1 = clock::now(); } void toc(const char* str) { t2 = clock::now(); std::cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; &amp;quot; time: &amp;quot; &amp;lt;&amp;lt; std::chrono::duration_cast&amp;lt;res&amp;gt;(t2 - t1).count() / 1e3 &amp;lt;&amp;lt; &amp;quot;ms.&amp;quot; &amp;lt;&amp;lt; std::endl; } private: typedef std::chrono::high_resolution_clock clock; typedef std::chrono::microseconds res; clock::time_point t1; clock::time_point t2; };  测试代码如下：
int main() { Timer timer; std::cout &amp;lt;&amp;lt; &amp;quot;1&amp;quot; &amp;lt;&amp;lt; std::endl; timer.</description>
    </item>
    
  </channel>
</rss>